CS265 Lab 9
Geoffrey xiao, gx26

Part 1: Debugging, GDB

Q1.
Running bug3 gave a "Segmentation fault (core dumped)" error. A file called
"core" was created in the directory.

Q2.
The inTable() caused the program to malfunction.

Q3.
a. I changed line 7 from 
	scanf( "%d", n ); 
to
	scanf( "%d", &n );
 
The second argument of scanf expects a memory address so I had to 
change n to &n.

b. I changed line 8 from
	printf("Pi=%d, n=%f\n", pi, n);
to
	printf("Pi=%f, n=%d\n", pi, n);
 
The variable pi is a double and 
should ue the %f format and n is a int and should use the %d format.

c. I changed line 79 from
	if( strcmp( st[i], s ) == 0 );
to
	if( st[i] != NULL && strcmp( st[i], s ) == 0 );

As discussed in Q1, the segmentation fault occurs when running bug3. A
segmentation fault occurs when the program attempts to access memory it
doesn't have access to. In bug3.c, the array st is initialized to NULL in
line 11:
	char* st[ MAX_LINES ] = {NULL};
In inTable(), st[i] attempts to use strcmp on a NULL value. Therefore we
need to check that st[i] is not NULL. The short circuit evaluation of C++ 
is used in the fix: if st[i] == NULL, the if loop does not evaluate the 
strcmp and there is no error. 

d. I changed line 25 from
	scanf("%d",n);
to
	scanf("%d",&n);

The problem here is similar to that in Q3a.

e.
I added two lines of code. I added
	#include <stdlib>
at the beginning of the program.
I also added:
	swap(v,0,rand() % n); 
before line 29. 

This is an issue because the added code places the pivot at the first
element. If the pivot is not the first element, the partitioning does not
work correctly and the partitions are unordered. This will cause the
variable last to take on values that exceed the array size. Then, when 
the program tries to. We can add an assert((last >= 0) && (last < n)) to
make sure last is a valid value.

Q4.
The compiler does not catch this error because this bug does not cause the
program to crash, rather the bug is an error in the logic. When I use the
corrected driverBug.c to sort the file "in", the strings are sorted in alphabetical
order: "buy, bye, done, etc...". When I use sort2.c the file "in" is not
sorted at all. To fix the program, we have to change line 66 from
   qsort(words,nwords,sizeof(words[0]),icmp);
to:
   qsort(words,nwords,sizeof(words[0]),scmp);

Q5.
When I use qsort to sort integers while passing the function scmp, the
integers are not sorted numerically. Instead, the integers are compared
digit by digit numerically. For example, the numbers "1,3,4,41,12,3" are
sorted into "1,12,3,3,4,41". The compiler does not catch this error as this
is an error in the algorithm. 

Part 2: Testing, JUnit

Please see the gInt.java, gIntTest.java, and build.xml files
